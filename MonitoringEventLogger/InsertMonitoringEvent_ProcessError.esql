

CREATE COMPUTE MODULE InsertMonitoringEvent_ProcessError
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
		CALL CopyEntireMessage();
		
		DECLARE vMessageNumber INTEGER;
		DECLARE vMessageText CHARACTER;
		
		CALL GetLastExceptionDetail(InputExceptionList, vMessageNumber, vMessageText);
		
		-- Create MQRFH2 header and save the error message
		IF NOT EXISTS(OutputRoot.MQRFH2[]) THEN
			CREATE NEXTSIBLING OF OutputRoot.MQMD DOMAIN 'MQRFH2';
			SET OutputRoot.MQMD.Format = MQFMT_RF_HEADER_2;			
		END IF;
		
		SET OutputRoot.MQRFH2.(MQRFH2.Field)Version        = 2;
		SET OutputRoot.MQRFH2.(MQRFH2.Field)CodedCharSetId  = InputRoot.MQMD.CodedCharSetId;
		SET OutputRoot.MQRFH2.(MQRFH2.Field)Format          = 'MQSTR';
		SET OutputRoot.MQRFH2.(MQRFH2.Field)NameValueCCSID  = InputRoot.MQMD.CodedCharSetId;
		
		SET OutputRoot.MQRFH2.usr.ErrorNumber = vMessageNumber;
		SET OutputRoot.MQRFH2.usr.ErrorDetail = vMessageText;
		
		RETURN TRUE;		
		
	END;
	
	CREATE PROCEDURE GetLastExceptionDetail(IN InputTree REFERENCE, OUT messageNumber INTEGER, OUT messageText CHARACTER)
	BEGIN
		DECLARE ptrException REFERENCE to InputTree.*[1];
		SET messageText = 'Error Details';
		
		WHILE LASTMOVE(ptrException) DO
			IF ptrException.Number IS NOT NULL THEN
				SET messageNumber = ptrException.Number;
				
				FOR rInsert AS ptrException.Insert[] DO
					IF rInsert.Type = 5 THEN
						SET messageText = messageText || ': ' || COALESCE(ptrException.Text, '') || ': ' || COALESCE(rInsert.Text, '');
					END IF;
				END FOR;

			END IF;
			
			MOVE ptrException LASTCHILD;
		END WHILE; 
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
